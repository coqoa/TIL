### HTTP (Hyper Text Transfer Protocol)
- 하이퍼 텍스트(= HTML)를 전송하기 위한 통신 규약

##### HTTPS (HTTP + Secure(SSL/TLS))
- HTTP의 보안적인 약점을 보강한 버전으로  
암호화를통해 `외부인의 정보 탈취`를 막고  
사용자가 `사이트의 신뢰성을 체크`할 수 있도록 해준다
- 대칭키와 비대칭키 방식을 혼합해서 사용한다

##### 대칭 키 방식
- 메시지를 보내는 쪽과 받는 쪽 양측에서 동일한 키로 복호화하는 방식
- 정보탈취의 위험성이 있지만 빠르다
- '어떻게 대칭키를 탈취당하지 않고 양측에 공유하는가'에 대한 한계가 있다

##### 비대칭 키 방식(공개키 방식)
- 한 쌍으로 이루어진 비대칭 키를 사용하는 방식으로 쌍이 맞는 키를 사용해야 복호화할 수 있다
- 개인이 비밀 보관하는 `개인키`와 외부에 공유하는 `공개키`로 나뉜다
- 제공자의 공개키를 이용해 사용자가 암호화하면 제공자의 개인키로만 복호화 할 수 있으므로 데이터를 중간에 탈취당해도 복호화 할 수 없다
- 제공자의 개인키는 제공자의 공개키로 복호화할 수 있다.  
외부에 공유되는 공개키를 이용해 신뢰할 수 있는 기관에서 공개키 검증을 진행하고  
이를 통해 사용자가 신뢰할 수 있도록 한다

##### 공개키 검증 
- TLS 핸드 셰이크 : 신뢰할 수 있는 기관(Certificate Authority) 목록을 프로그램에 보관하고 클라이언트 - 서버간 탐색하는 과정
1. 클라이언트에서 랜덤 데이터를 생성해서 서버로 전송한다
2. 서버에서 무작위 데이터를 생성하고 해당 서버의 인증서와 함께 응답한다  
3. 클라이언트는 내장된 CA목록으로 비대칭키 시스템을 이용해서 인증서를 복호화한다
4. 성공적으로 복호화된 인증서에는 해당 서버의 공개키가 포함되어있다
5. 복호화를 통해 알아낸 해당 서버의 공개키를 이용해서 때에 따라 대칭키 / 비대칭키 방식을 혼합해서 사용한다
  ```
  비대칭키를 이용하는 방식은 대칭키를 이용하는 방식보다 서버에 훨씬 큰 부담을 주기 때문에 
  데이터들을 주고받는 데이터는 대칭키로 암호화하고,  
  대칭키를 공유할 때 비대칭키를 사용한다
  ```
6. 클라이언트에서 생성된 랜덤 데이터와 서버에서 생성된 랜덤 데이터를 혼합해서 임시 키를 만들고  
이 임시 키는 서버의 공개 키로 암호화돼서 서버로 보내진 다음 양쪽에서 일련한 과정을 거쳐 동일한 대칭키가 만들어짐
